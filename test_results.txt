apiVersion: apps/v1
kind: Deployment
metadata:
  name: sampleappprod
  namespace: sampleapp
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: sampleapp
      app.kubernetes.io/env: prod
      app.kubernetes.io/instance: sampleapp-prod
      app.k8s.io/component: sampleappprod
  template:
    metadata:
      labels:
        app.kubernetes.io/name: sampleapp
        app.kubernetes.io/env: prod
        app.kubernetes.io/instance: sampleapp-prod
        app.k8s.io/component: sampleappprod
    spec:
      containers:
      - env:
        - name: MY_ENV
          value: MY_VALUE
        image: nginx:1.7.8
        name: main
        ports:
        - containerPort: 80
          protocol: TCP
        resources:
          limits:
            cpu: '100m'
            memory: '100Mi'
            ephemeral-storage: '1Gi'
          requests:
            cpu: '100m'
            memory: '100Mi'
            ephemeral-storage: '1Gi'
        volumeMounts: []
---
apiVersion: v1
kind: Namespace
metadata:
  name: sampleapp
---
apiVersion: v1
kind: Service
metadata:
  name: nginx
  namespace: nginx
spec:
  ports:
  - nodePort: 30201
    port: 80
    targetPort: 80
  selector:
    app.kubernetes.io/name: sampleapp
    app.kubernetes.io/env: prod
    app.kubernetes.io/instance: sampleapp-prod
    app.k8s.io/component: sampleappprod
  type: NodePort
---
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: null
  namespace: null
  labels:
    app: null
spec:
  basicAuth:
    secret: null
    removeHeader: true
[32mTest SUCCESSED - ./examples/appops/extra-resources-example/dev[0m

apiVersion: apps/v1
kind: Deployment
metadata:
  name: sampleappprod
  namespace: sampleapp
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: sampleapp
      app.kubernetes.io/env: prod
      app.kubernetes.io/instance: sampleapp-prod
      app.k8s.io/component: sampleappprod
  template:
    metadata:
      labels:
        app.kubernetes.io/name: sampleapp
        app.kubernetes.io/env: prod
        app.kubernetes.io/instance: sampleapp-prod
        app.k8s.io/component: sampleappprod
    spec:
      containers:
      - env:
        - name: MY_ENV
          value: MY_VALUE
        image: nginx:1.7.8
        name: main
        ports:
        - containerPort: 80
          protocol: TCP
        resources:
          limits:
            cpu: '100m'
            memory: '100Mi'
            ephemeral-storage: '1Gi'
          requests:
            cpu: '100m'
            memory: '100Mi'
            ephemeral-storage: '1Gi'
        volumeMounts: []
---
apiVersion: v1
kind: Namespace
metadata:
  name: sampleapp
---
apiVersion: v1
kind: Service
metadata:
  name: nginx
  namespace: nginx
spec:
  ports:
  - nodePort: 30201
    port: 80
    targetPort: 80
  selector:
    app.kubernetes.io/name: sampleapp
    app.kubernetes.io/env: prod
    app.kubernetes.io/instance: sampleapp-prod
    app.k8s.io/component: sampleappprod
  type: NodePort
[32mTest SUCCESSED - ./examples/appops/nginx-example/dev[0m

apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-leader
  namespace: redis-leader
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: sampleapp
      app.kubernetes.io/env: prod
      app.kubernetes.io/instance: sampleapp-prod
      app.k8s.io/component: redis-leader
  template:
    metadata:
      labels:
        app.kubernetes.io/name: sampleapp
        app.kubernetes.io/env: prod
        app.kubernetes.io/instance: sampleapp-prod
        app.k8s.io/component: redis-leader
    spec:
      containers:
      - image: docker.io/redis:6.0.5
        name: main
        ports:
        - containerPort: 6379
          protocol: TCP
        resources:
          limits:
            cpu: '100m'
            memory: '100Mi'
            ephemeral-storage: '1Gi'
          requests:
            cpu: '100m'
            memory: '100Mi'
            ephemeral-storage: '1Gi'
        volumeMounts: []
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-follower
  namespace: redis-follower
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: sampleapp
      app.kubernetes.io/env: prod
      app.kubernetes.io/instance: sampleapp-prod
      app.k8s.io/component: redis-follower
  template:
    metadata:
      labels:
        app.kubernetes.io/name: sampleapp
        app.kubernetes.io/env: prod
        app.kubernetes.io/instance: sampleapp-prod
        app.k8s.io/component: redis-follower
    spec:
      containers:
      - image: gcr.io/google_samples/gb-redis-follower:v2
        name: main
        ports:
        - containerPort: 6379
          protocol: TCP
        resources:
          limits:
            cpu: '100m'
            memory: '100Mi'
            ephemeral-storage: '1Gi'
          requests:
            cpu: '100m'
            memory: '100Mi'
            ephemeral-storage: '1Gi'
        volumeMounts: []
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: frontend
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: sampleapp
      app.kubernetes.io/env: prod
      app.kubernetes.io/instance: sampleapp-prod
      app.k8s.io/component: frontend
  template:
    metadata:
      labels:
        app.kubernetes.io/name: sampleapp
        app.kubernetes.io/env: prod
        app.kubernetes.io/instance: sampleapp-prod
        app.k8s.io/component: frontend
    spec:
      containers:
      - env:
        - name: GET_HOSTS_FROM
          value: dns
        image: gcr.io/google-samples/gb-frontend:v3
        name: php-redis
        ports:
        - containerPort: 80
          protocol: TCP
        resources:
          limits:
            cpu: '100m'
            memory: '100Mi'
            ephemeral-storage: '1Gi'
          requests:
            cpu: '100m'
            memory: '100Mi'
            ephemeral-storage: '1Gi'
        volumeMounts: []
---
apiVersion: v1
kind: Namespace
metadata:
  name: sampleapp
---
apiVersion: v1
kind: Service
metadata:
  name: redis-leader
  namespace: sampleapp
spec:
  ports:
  - port: 6379
  selector:
    app.kubernetes.io/name: sampleapp
    app.kubernetes.io/env: prod
    app.kubernetes.io/instance: sampleapp-prod
    app.k8s.io/component: redis-leader
---
apiVersion: v1
kind: Service
metadata:
  name: redis-follower
  namespace: sampleapp
spec:
  ports:
  - port: 6379
  selector:
    app.kubernetes.io/name: sampleapp
    app.kubernetes.io/env: prod
    app.kubernetes.io/instance: sampleapp-prod
    app.k8s.io/component: redis-follower
---
apiVersion: v1
kind: Service
metadata:
  name: frontend
  namespace: sampleapp
spec:
  ports:
  - port: 80
  selector:
    app.kubernetes.io/name: sampleapp
    app.kubernetes.io/env: prod
    app.kubernetes.io/instance: sampleapp-prod
    app.k8s.io/component: frontend
[32mTest SUCCESSED - ./examples/appops/guestbook/prod[0m

apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-leader
  namespace: redis-leader
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: sampleapp
      app.kubernetes.io/env: prod
      app.kubernetes.io/instance: sampleapp-prod
      app.k8s.io/component: redis-leader
  template:
    metadata:
      labels:
        app.kubernetes.io/name: sampleapp
        app.kubernetes.io/env: prod
        app.kubernetes.io/instance: sampleapp-prod
        app.k8s.io/component: redis-leader
    spec:
      containers:
      - image: docker.io/redis:6.0.5
        name: main
        ports:
        - containerPort: 6379
          protocol: TCP
        resources:
          limits:
            cpu: '100m'
            memory: '100Mi'
            ephemeral-storage: '1Gi'
          requests:
            cpu: '100m'
            memory: '100Mi'
            ephemeral-storage: '1Gi'
        volumeMounts: []
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-follower
  namespace: redis-follower
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: sampleapp
      app.kubernetes.io/env: prod
      app.kubernetes.io/instance: sampleapp-prod
      app.k8s.io/component: redis-follower
  template:
    metadata:
      labels:
        app.kubernetes.io/name: sampleapp
        app.kubernetes.io/env: prod
        app.kubernetes.io/instance: sampleapp-prod
        app.k8s.io/component: redis-follower
    spec:
      containers:
      - image: gcr.io/google_samples/gb-redis-follower:v2
        name: main
        ports:
        - containerPort: 6379
          protocol: TCP
        resources:
          limits:
            cpu: '100m'
            memory: '100Mi'
            ephemeral-storage: '1Gi'
          requests:
            cpu: '100m'
            memory: '100Mi'
            ephemeral-storage: '1Gi'
        volumeMounts: []
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: frontend
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: sampleapp
      app.kubernetes.io/env: prod
      app.kubernetes.io/instance: sampleapp-prod
      app.k8s.io/component: frontend
  template:
    metadata:
      labels:
        app.kubernetes.io/name: sampleapp
        app.kubernetes.io/env: prod
        app.kubernetes.io/instance: sampleapp-prod
        app.k8s.io/component: frontend
    spec:
      containers:
      - env:
        - name: GET_HOSTS_FROM
          value: dns
        image: gcr.io/google-samples/gb-frontend:v4
        name: php-redis
        ports:
        - containerPort: 80
          protocol: TCP
        resources:
          limits:
            cpu: '100m'
            memory: '100Mi'
            ephemeral-storage: '1Gi'
          requests:
            cpu: '100m'
            memory: '100Mi'
            ephemeral-storage: '1Gi'
        volumeMounts: []
---
apiVersion: v1
kind: Namespace
metadata:
  name: sampleapp
---
apiVersion: v1
kind: Service
metadata:
  name: redis-leader
  namespace: sampleapp
spec:
  ports:
  - port: 6379
  selector:
    app.kubernetes.io/name: sampleapp
    app.kubernetes.io/env: prod
    app.kubernetes.io/instance: sampleapp-prod
    app.k8s.io/component: redis-leader
---
apiVersion: v1
kind: Service
metadata:
  name: redis-follower
  namespace: sampleapp
spec:
  ports:
  - port: 6379
  selector:
    app.kubernetes.io/name: sampleapp
    app.kubernetes.io/env: prod
    app.kubernetes.io/instance: sampleapp-prod
    app.k8s.io/component: redis-follower
---
apiVersion: v1
kind: Service
metadata:
  name: frontend
  namespace: sampleapp
spec:
  ports:
  - port: 80
  selector:
    app.kubernetes.io/name: sampleapp
    app.kubernetes.io/env: prod
    app.kubernetes.io/instance: sampleapp-prod
    app.k8s.io/component: frontend
[32mTest SUCCESSED - ./examples/appops/guestbook/test[0m

apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-leader
  namespace: redis-leader
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: sampleapp
      app.kubernetes.io/env: prod
      app.kubernetes.io/instance: sampleapp-prod
      app.k8s.io/component: redis-leader
  template:
    metadata:
      labels:
        app.kubernetes.io/name: sampleapp
        app.kubernetes.io/env: prod
        app.kubernetes.io/instance: sampleapp-prod
        app.k8s.io/component: redis-leader
    spec:
      containers:
      - image: docker.io/redis:6.0.5
        name: main
        ports:
        - containerPort: 6379
          protocol: TCP
        resources:
          limits:
            cpu: '100m'
            memory: '100Mi'
            ephemeral-storage: '1Gi'
          requests:
            cpu: '100m'
            memory: '100Mi'
            ephemeral-storage: '1Gi'
        volumeMounts: []
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-follower
  namespace: redis-follower
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: sampleapp
      app.kubernetes.io/env: prod
      app.kubernetes.io/instance: sampleapp-prod
      app.k8s.io/component: redis-follower
  template:
    metadata:
      labels:
        app.kubernetes.io/name: sampleapp
        app.kubernetes.io/env: prod
        app.kubernetes.io/instance: sampleapp-prod
        app.k8s.io/component: redis-follower
    spec:
      containers:
      - image: gcr.io/google_samples/gb-redis-follower:v2
        name: main
        ports:
        - containerPort: 6379
          protocol: TCP
        resources:
          limits:
            cpu: '100m'
            memory: '100Mi'
            ephemeral-storage: '1Gi'
          requests:
            cpu: '100m'
            memory: '100Mi'
            ephemeral-storage: '1Gi'
        volumeMounts: []
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: frontend
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: sampleapp
      app.kubernetes.io/env: prod
      app.kubernetes.io/instance: sampleapp-prod
      app.k8s.io/component: frontend
  template:
    metadata:
      labels:
        app.kubernetes.io/name: sampleapp
        app.kubernetes.io/env: prod
        app.kubernetes.io/instance: sampleapp-prod
        app.k8s.io/component: frontend
    spec:
      containers:
      - env:
        - name: GET_HOSTS_FROM
          value: dns
        image: gcr.io/google-samples/gb-frontend:v5
        name: php-redis
        ports:
        - containerPort: 80
          protocol: TCP
        resources:
          limits:
            cpu: '100m'
            memory: '100Mi'
            ephemeral-storage: '1Gi'
          requests:
            cpu: '100m'
            memory: '100Mi'
            ephemeral-storage: '1Gi'
        volumeMounts: []
---
apiVersion: v1
kind: Namespace
metadata:
  name: sampleapp
---
apiVersion: v1
kind: Service
metadata:
  name: redis-leader
  namespace: sampleapp
spec:
  ports:
  - port: 6379
  selector:
    app.kubernetes.io/name: sampleapp
    app.kubernetes.io/env: prod
    app.kubernetes.io/instance: sampleapp-prod
    app.k8s.io/component: redis-leader
---
apiVersion: v1
kind: Service
metadata:
  name: redis-follower
  namespace: sampleapp
spec:
  ports:
  - port: 6379
  selector:
    app.kubernetes.io/name: sampleapp
    app.kubernetes.io/env: prod
    app.kubernetes.io/instance: sampleapp-prod
    app.k8s.io/component: redis-follower
---
apiVersion: v1
kind: Service
metadata:
  name: frontend
  namespace: sampleapp
spec:
  ports:
  - port: 80
  selector:
    app.kubernetes.io/name: sampleapp
    app.kubernetes.io/env: prod
    app.kubernetes.io/instance: sampleapp-prod
    app.k8s.io/component: frontend
[32mTest SUCCESSED - ./examples/appops/guestbook/dev[0m

apiVersion: apps/v1
kind: Deployment
metadata:
  name: sampleappprod
  namespace: sampleapp
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: sampleapp
      app.kubernetes.io/env: prod
      app.kubernetes.io/instance: sampleapp-prod
      app.k8s.io/component: sampleappprod
  template:
    metadata:
      labels:
        app.kubernetes.io/name: sampleapp
        app.kubernetes.io/env: prod
        app.kubernetes.io/instance: sampleapp-prod
        app.k8s.io/component: sampleappprod
    spec:
      containers:
      - args:
        - '-text=apple'
        image: hashicorp/http-echo
        name: apple-app
        resources:
          limits:
            cpu: '100m'
            memory: '100Mi'
            ephemeral-storage: '1Gi'
          requests:
            cpu: '100m'
            memory: '100Mi'
            ephemeral-storage: '1Gi'
        volumeMounts: []
---
apiVersion: v1
kind: Namespace
metadata:
  name: sampleapp
---
apiVersion: v1
kind: Service
metadata:
  name: apple-service
  namespace: apple-service
spec:
  ports:
  - port: 5678
  selector:
    app.kubernetes.io/name: sampleapp
    app.kubernetes.io/env: prod
    app.kubernetes.io/instance: sampleapp-prod
    app.k8s.io/component: sampleappprod
  type: NodePort
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: example-ingress
  namespace: example-ingress
spec:
  rules:
  - http:
      paths:
      - backend:
          service:
            name: apple-service
            port:
              number: 5678
        path: /apple
        pathType: Prefix
[32mTest SUCCESSED - ./examples/appops/http-echo/dev[0m

apiVersion: apps/v1
kind: Deployment
metadata:
  name: sampleappprod
  namespace: sampleapp
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: sampleapp
      app.kubernetes.io/env: prod
      app.kubernetes.io/instance: sampleapp-prod
      app.k8s.io/component: sampleappprod
  template:
    metadata:
      labels:
        app.kubernetes.io/name: sampleapp
        app.kubernetes.io/env: prod
        app.kubernetes.io/instance: sampleapp-prod
        app.k8s.io/component: sampleappprod
    spec:
      containers:
      - image: gcr.io/google-samples/gb-frontend:v4
        name: main
        resources:
          limits:
            cpu: '100m'
            memory: '100Mi'
            ephemeral-storage: '1Gi'
          requests:
            cpu: '100m'
            memory: '100Mi'
            ephemeral-storage: '1Gi'
        volumeMounts: []
---
apiVersion: v1
kind: Namespace
metadata:
  name: sampleapp
[32mTest SUCCESSED - ./examples/server/app_need_namespace/prod[0m

apiVersion: apps/v1
kind: Deployment
metadata:
  name: sampleappprod
  namespace: sampleapp
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: sampleapp
      app.kubernetes.io/env: prod
      app.kubernetes.io/instance: sampleapp-prod
      app.k8s.io/component: sampleappprod
  template:
    metadata:
      labels:
        app.kubernetes.io/name: sampleapp
        app.kubernetes.io/env: prod
        app.kubernetes.io/instance: sampleapp-prod
        app.k8s.io/component: sampleappprod
    spec:
      containers:
      - image: gcr.io/google-samples/gb-frontend:v4
        name: main
        resources:
          limits:
            cpu: '100m'
            memory: '100Mi'
            ephemeral-storage: '1Gi'
          requests:
            cpu: '100m'
            memory: '100Mi'
            ephemeral-storage: '1Gi'
        volumeMounts: []
---
apiVersion: v1
kind: Namespace
metadata:
  name: sampleapp
---
apiVersion: v1
data:
  app.name: app_config_map
kind: ConfigMap
metadata:
  name: sampleappprod0
  namespace: sampleapp
---
apiVersion: v1
data:
  nginx.conf: configuration_content
kind: ConfigMap
metadata:
  name: sampleappprod1
  namespace: sampleapp
[32mTest SUCCESSED - ./examples/server/app_config_map/prod[0m

apiVersion: apps/v1
kind: Deployment
metadata:
  name: sampleappprod
  namespace: sampleapp
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: sampleapp
      app.kubernetes.io/env: prod
      app.kubernetes.io/instance: sampleapp-prod
      app.kubernetes.io/version: v1.0.0
      app.k8s.io/component: sampleappprod
  template:
    metadata:
      annotations:
        owner: team-iac
      labels:
        app.kubernetes.io/name: sampleapp
        app.kubernetes.io/env: prod
        app.kubernetes.io/instance: sampleapp-prod
        app.k8s.io/component: sampleappprod
        app.kubernetes.io/version: v1.0.0
    spec:
      containers:
      - image: gcr.io/google-samples/gb-frontend:v4
        name: main
        resources:
          limits:
            cpu: '100m'
            memory: '100Mi'
            ephemeral-storage: '1Gi'
          requests:
            cpu: '100m'
            memory: '100Mi'
            ephemeral-storage: '1Gi'
        volumeMounts: []
---
apiVersion: v1
kind: Namespace
metadata:
  name: sampleapp
[32mTest SUCCESSED - ./examples/server/app_label_selector/prod[0m

apiVersion: apps/v1
kind: Deployment
metadata:
  name: sampleappprod
  namespace: sampleapp
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: sampleapp
      app.kubernetes.io/env: prod
      app.kubernetes.io/instance: sampleapp-prod
      app.k8s.io/component: sampleappprod
  template:
    metadata:
      labels:
        app.kubernetes.io/name: sampleapp
        app.kubernetes.io/env: prod
        app.kubernetes.io/instance: sampleapp-prod
        app.k8s.io/component: sampleappprod
    spec:
      containers:
      - args:
        - start
        command:
        - /home/admin/server.sh
        env:
        - name: app.version
          value: v1.0.0
        envFrom:
        - configMapRef:
            name: my-configmap
        image: gcr.io/google-samples/gb-frontend:v4
        lifecycle:
          preStop:
            exec:
              command:
              - /bin/sh
              - '-c'
              - echo 1
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - '-c'
            - echo livenessProbe
          failureThreshold: 3
          initialDelaySeconds: 30
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 10
        name: main
        ports:
        - containerPort: 12201
          protocol: TCP
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - '-c'
            - echo readinessProbe
          failureThreshold: 3
          initialDelaySeconds: 30
          periodSeconds: 5
          successThreshold: 2
          timeoutSeconds: 10
        resources:
          limits:
            cpu: '100m'
            memory: '100Mi'
            ephemeral-storage: '1Gi'
          requests:
            cpu: '100m'
            memory: '100Mi'
            ephemeral-storage: '1Gi'
        startupProbe:
          exec:
            command:
            - /bin/sh
            - '-c'
            - echo startupProbe
          failureThreshold: 3
          initialDelaySeconds: 30
          periodSeconds: 5
          successThreshold: 2
          timeoutSeconds: 10
        volumeMounts: []
---
apiVersion: v1
kind: Namespace
metadata:
  name: sampleapp
[32mTest SUCCESSED - ./examples/server/app_main_container/prod[0m

apiVersion: apps/v1
kind: Deployment
metadata:
  name: sampleappprod
  namespace: sampleapp
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: sampleapp
      app.kubernetes.io/env: prod
      app.kubernetes.io/instance: sampleapp-prod
      app.k8s.io/component: sampleappprod
  template:
    metadata:
      labels:
        app.kubernetes.io/name: sampleapp
        app.kubernetes.io/env: prod
        app.kubernetes.io/instance: sampleapp-prod
        app.k8s.io/component: sampleappprod
    spec:
      containers:
      - image: gcr.io/google-samples/gb-frontend:v4
        name: main
        resources:
          limits:
            cpu: '100m'
            memory: '100Mi'
            ephemeral-storage: '1Gi'
          requests:
            cpu: '100m'
            memory: '100Mi'
            ephemeral-storage: '1Gi'
        volumeMounts: []
      - env:
        - name: FILES_TO_COLLECT
          value: /mnt/log/synthetic-count.log /mnt/log/synthetic-dates.log
        image: gcr.io/google_containers/fluentd-sidecar-es:1.0
        name: sidecar-log-collector
        resources:
          limits:
            cpu: '1'
            memory: '2Gi'
            ephemeral-storage: '20Gi'
          requests:
            cpu: '1'
            memory: '2Gi'
            ephemeral-storage: '20Gi'
        volumeMounts:
        - mountPath: /mnt/log
          name: log-storage
          readOnly: true
      volumes:
      - emptyDir: {}
        name: log-storage
---
apiVersion: v1
kind: Namespace
metadata:
  name: sampleapp
[32mTest SUCCESSED - ./examples/server/app_sidecar/prod[0m

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: sampleappprod
  namespace: sampleapp
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: sampleapp
      app.kubernetes.io/env: prod
      app.kubernetes.io/instance: sampleapp-prod
      app.k8s.io/component: sampleappprod
  serviceName: sampleappprod
  template:
    metadata:
      labels:
        app.kubernetes.io/name: sampleapp
        app.kubernetes.io/env: prod
        app.kubernetes.io/instance: sampleapp-prod
        app.k8s.io/component: sampleappprod
    spec:
      containers:
      - image: gcr.io/google-samples/gb-frontend:v4
        name: main
        resources:
          limits:
            cpu: '100m'
            memory: '100Mi'
            ephemeral-storage: '1Gi'
          requests:
            cpu: '100m'
            memory: '100Mi'
            ephemeral-storage: '1Gi'
        volumeMounts: []
---
apiVersion: v1
kind: Service
metadata:
  name: sampleappprod
  namespace: sampleapp
spec:
  clusterIP: None
  selector:
    app.kubernetes.io/name: sampleapp
    app.kubernetes.io/env: prod
    app.kubernetes.io/instance: sampleapp-prod
    app.k8s.io/component: sampleappprod
---
apiVersion: v1
kind: Namespace
metadata:
  name: sampleapp
[32mTest SUCCESSED - ./examples/server/app_stateful_set/prod[0m

apiVersion: apps/v1
kind: Deployment
metadata:
  name: sampleappprod
  namespace: sampleapp
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: sampleapp
      app.kubernetes.io/env: prod
      app.kubernetes.io/instance: sampleapp-prod
      app.k8s.io/component: sampleappprod
  template:
    metadata:
      labels:
        app.kubernetes.io/name: sampleapp
        app.kubernetes.io/env: prod
        app.kubernetes.io/instance: sampleapp-prod
        app.k8s.io/component: sampleappprod
    spec:
      containers:
      - image: gcr.io/google-samples/gb-frontend:v4
        name: main
        resources:
          limits:
            cpu: '100m'
            memory: '100Mi'
            ephemeral-storage: '1Gi'
          requests:
            cpu: '100m'
            memory: '100Mi'
            ephemeral-storage: '1Gi'
        volumeMounts: []
---
apiVersion: v1
kind: Namespace
metadata:
  name: sampleapp
---
apiVersion: v1
kind: Service
metadata:
  name: frontend
  namespace: frontend
spec:
  ports:
  - port: 80
  selector:
    app.kubernetes.io/name: sampleapp
    app.kubernetes.io/env: prod
    app.kubernetes.io/instance: sampleapp-prod
    app.k8s.io/component: sampleappprod
  type: NodePort
[32mTest SUCCESSED - ./examples/server/app_service/prod[0m

apiVersion: apps/v1
kind: Deployment
metadata:
  name: sampleappprod
  namespace: sampleapp
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: sampleapp
      app.kubernetes.io/env: prod
      app.kubernetes.io/instance: sampleapp-prod
      app.k8s.io/component: sampleappprod
  template:
    metadata:
      labels:
        app.kubernetes.io/name: sampleapp
        app.kubernetes.io/env: myenv
        app.kubernetes.io/instance: sampleapp-prod
        app.k8s.io/component: sampleappprod
    spec:
      containers:
      - image: gcr.io/google-samples/gb-frontend:v4
        name: main
        resources:
          limits:
            cpu: '100m'
            memory: '100Mi'
            ephemeral-storage: '1Gi'
          requests:
            cpu: '100m'
            memory: '100Mi'
            ephemeral-storage: '1Gi'
        volumeMounts: []
---
apiVersion: v1
kind: Namespace
metadata:
  name: sampleapp
---
apiVersion: v1
data:
  ca.conf: ZG9tYWluSWQ9CmdhdGV3YXk9aHR0cDovL2xhYi5nYXRld2F5LmdhbGF4eS5teWJhbmsuY2
kind: Secret
metadata:
  name: sampleappprod0
  namespace: sampleapp
type: Opaque
---
apiVersion: v1
data:
  token: cVZFZGowOGg1Zm5nbWlJS0FzMWw2OUhPUVdEd1pNeHo=
kind: Secret
metadata:
  name: sampleappprod1
  namespace: sampleapp
type: Opaque
[32mTest SUCCESSED - ./examples/server/app_secret/prod[0m

apiVersion: apps/v1
kind: Deployment
metadata:
  name: sampleappprod
  namespace: sampleapp
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: sampleapp
      app.kubernetes.io/env: prod
      app.kubernetes.io/instance: sampleapp-prod
      app.k8s.io/component: sampleappprod
  template:
    metadata:
      labels:
        app.kubernetes.io/name: sampleapp
        app.kubernetes.io/env: prod
        app.kubernetes.io/instance: sampleapp-prod
        app.k8s.io/component: sampleappprod
    spec:
      containers:
      - image: gcr.io/google-samples/gb-frontend:v4
        name: main
        resources:
          limits:
            cpu: '1'
            memory: '1Gi'
            ephemeral-storage: '30Gi'
          requests:
            cpu: '1'
            memory: '1Gi'
            ephemeral-storage: '30Gi'
        volumeMounts: []
---
apiVersion: v1
kind: Namespace
metadata:
  name: sampleapp
[32mTest SUCCESSED - ./examples/server/app_scheduling_strategy/prod[0m

apiVersion: apps/v1
kind: Deployment
metadata:
  name: sampleappprod
  namespace: sampleapp
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: sampleapp
      app.kubernetes.io/env: prod
      app.kubernetes.io/instance: sampleapp-prod
      app.k8s.io/component: sampleappprod
  template:
    metadata:
      labels:
        app.kubernetes.io/name: sampleapp
        app.kubernetes.io/env: prod
        app.kubernetes.io/instance: sampleapp-prod
        app.k8s.io/component: sampleappprod
    spec:
      containers:
      - image: gcr.io/google-samples/gb-frontend:v4
        name: main
        resources:
          limits:
            cpu: '100m'
            memory: '100Mi'
            ephemeral-storage: '1Gi'
          requests:
            cpu: '100m'
            memory: '100Mi'
            ephemeral-storage: '1Gi'
        volumeMounts:
        - mountPath: /home/admin/logs
          name: log-volume
      volumes:
      - emptyDir: {}
        name: log-volume
---
apiVersion: v1
kind: Namespace
metadata:
  name: sampleapp
[32mTest SUCCESSED - ./examples/server/app_volume/prod[0m

apiVersion: apps/v1
kind: Deployment
metadata:
  name: sampleappprod
  namespace: sampleapp
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: sampleapp
      app.kubernetes.io/env: prod
      app.kubernetes.io/instance: sampleapp-prod
      app.k8s.io/component: sampleappprod
  template:
    metadata:
      labels:
        app.kubernetes.io/name: sampleapp
        app.kubernetes.io/env: prod
        app.kubernetes.io/instance: sampleapp-prod
        app.k8s.io/component: sampleappprod
    spec:
      containers:
      - image: gcr.io/google-samples/gb-frontend:v4
        name: main
        resources:
          limits:
            cpu: '100m'
            memory: '100Mi'
            ephemeral-storage: '1Gi'
          requests:
            cpu: '100m'
            memory: '100Mi'
            ephemeral-storage: '1Gi'
        volumeMounts:
        - mountPath: /home/admin/logs
          name: log-volume
      volumes:
      - emptyDir: {}
        name: log-volume
---
apiVersion: v1
kind: Namespace
metadata:
  name: sampleapp
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: my-rule
rules:
- apiGroups:
  - v1
  verbs:
  - '*'
[32mTest SUCCESSED - ./examples/server/app_rbac/prod[0m

